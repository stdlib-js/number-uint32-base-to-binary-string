{
  "version": 3,
  "sources": ["../lib/div2.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lpad = require( '@stdlib/string-left-pad' );\nvar div2 = require( './div2.js' );\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 32-bit integer.\n*\n* @param {uinteger32} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint32Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000001'\n*\n* @example\n* var a = new Uint32Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000100'\n*\n* @example\n* var a = new Uint32Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 32 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of an unsigned 32-bit integer.\n*\n* @module @stdlib/number-uint32-base-to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number-uint32-base-to-binary-string' );\n* var a = new Uint32Array( [ 1, 4, 9 ] );\n*\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000001'\n*\n* str = toBinaryString( a[1] );\n* // returns '00000000000000000000000000000100'\n*\n* str = toBinaryString( a[2] );\n* // returns '00000000000000000000000000001001'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EAKnDC,EAAQ,GA4BZ,SAASC,EAAMC,EAAI,CAClB,IAAIC,EAAM,GACN,EACAC,EAIJ,IADA,EAAIJ,EACIE,EAAI,GAAK,GAChBE,EAAIF,EAAI,EACRA,EAAIH,EAAOK,CAAE,EACRA,IAAMF,EACVC,EAAM,IAAMA,EAEZA,EAAM,IAAMA,EAEb,GAAK,EAEN,OAAOA,CACR,CAKAL,EAAO,QAAUG,IC9EjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,yBAA0B,EAC1CC,EAAO,IAKPC,EAAQ,GA0BZ,SAASC,EAAgBC,EAAI,CAC5B,IAAIC,EAGJ,OAAAA,EAAIJ,EAAMG,CAAE,EAGZC,EAAIL,EAAMK,EAAGH,EAAO,GAAI,EAEjBG,CACR,CAKAN,EAAO,QAAUI,IC5BjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_div2", "__commonJSMin", "exports", "module", "floor", "NBITS", "div2", "x", "str", "y", "require_main", "__commonJSMin", "exports", "module", "lpad", "div2", "NBITS", "toBinaryString", "x", "b", "main"]
}
